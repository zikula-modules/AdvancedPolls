<?php
/**
 * Advanced Polls module for Zikula
 *
 * @author Mark West, Carsten Volmer
 * @copyright (C) 2002-2010 by Advanced Polls Development Team
 * @link http://code.zikula.org/advancedpolls
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 */

class AdvancedPolls_Controller_Admin extends Zikula_AbstractController {

/**
 * The main administration function
 */
public function main($args)
{
    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::item', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Return the output that has been generated by this function
    return $this->view->fetch('advancedpolls_admin_main.htm');
    
}

/**
 * Add new item
 */
function newitem($args)
{
    $dom = ZLanguage::getModuleDomain('advanced_polls');

    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::item', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // Get the module configuration vars
    $modvars = ModUtil::getVar($this->name);


    if ($modvars['enablecategorization']) {
        // load the category registry util
       /* if (!($class = Loader::loadClass('CategoryRegistryUtil'))) {
            pn_exit (__f('Error! Unable to load class [%s]', array('s' => 'CategoryRegistryUtil'), $dom));
        }*/
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories ($this->name, 'advanced_polls_desc');

        $this->view->assign('catregistry', $catregistry);
    }

    $this->view->assign($modvars);

    // Return the output that has been generated by this function
    return $this->view->fetch('advancedpolls_admin_new.htm');
}

/**
 * Create a poll
 */
public function create($args)
{
    $dom = ZLanguage::getModuleDomain('advanced_polls');

    $poll                = FormUtil::getPassedValue('poll', isset($args['poll']) ? $args['poll'] : null, 'POST');
    $poll['startDay']    = FormUtil::getPassedValue('startDay', isset($args['startDay']) ? $args['startDay'] : null, 'POST');
    $poll['startMonth']  = FormUtil::getPassedValue('startMonth', isset($args['startMonth']) ? $args['startMonth'] : null, 'POST');
    $poll['startYear']   = FormUtil::getPassedValue('startYear', isset($args['startYear']) ? $args['startYear'] : null, 'POST');
    $poll['startHour']   = FormUtil::getPassedValue('startHour', isset($args['startHour']) ? $args['startHour'] : null, 'POST');
    $poll['startMinute'] = FormUtil::getPassedValue('startMinute', isset($args['startMinute']) ? $args['startMinute'] : null, 'POST');
    $poll['closeDay']    = FormUtil::getPassedValue('closeDay', isset($args['closeDay']) ? $args['closeDay'] : null, 'POST');
    $poll['closeMonth']  = FormUtil::getPassedValue('closeMonth', isset($args['closeMonth']) ? $args['closeMonth'] : null, 'POST');
    $poll['closeYear']   = FormUtil::getPassedValue('closeYear', isset($args['closeYear']) ? $args['closeYear'] : null, 'POST');
    $poll['closeHour']   = FormUtil::getPassedValue('closeHour', isset($args['closeHour']) ? $args['closeHour'] : null, 'POST');
    $poll['closeMinute'] = FormUtil::getPassedValue('closeMinute', isset($args['closeMinute']) ? $args['closeMinute'] : null, 'POST');

    // Confirm authorisation code.
    
    if (!SecurityUtil::generateCsrfToken()) {
        return LogUtil::registerPermissionError (ModUtil::url('AdvancedPolls', 'admin', 'view'));
    }

    // Notable by its absence there is no security check here.

    // The API function is called.
    $pollid = ModUtil::apiFunc($this->name, 'admin', 'create', $poll);

    // The return value of the function is checked
    if ($pollid  != false) {
        LogUtil::registerStatus($this->__('Done! Poll created.'));
    }

    // redirect the user to an appropriate page
    return System::redirect(ModUtil::url($this->name, 'admin', 'modify', array('pollid' => $pollid)));
}

/**
 * Modify a Poll
 *
 * @param 'pollid' the id of the item to be modified
 */
public function modify($args)
{
    $dom = ZLanguage::getModuleDomain('advanced_polls');

    // Get parameters from whatever input we need.
    $pollid = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'GET');
	//$pollid = $this->request->getGet()->filter('pollid', 5, FILTER_SANITIZE_NUMBER_INT);
    // Get the poll from the API function
    $item = ModUtil::apiFunc($this->name, 'user', 'get', array('pollid' => $pollid));
    if ($item === false) {
        return LogUtil::registerError($this->__('Error! No such poll found.', $dom));
    }

    // Security check.
    if (!SecurityUtil::checkPermission('advanced_polls::item', "$item[title]::$pollid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Get the module configuration vars
    $modvars = ModUtil::getVar($this->name);

    // get vote counts
    $votecount = ModUtil::apiFunc($this->name, 'user', 'pollvotecount', array('pollid' => $pollid));

    if ($modvars['enablecategorization']) {
        // load the category registry util
        if (!($class = Loader::loadClass('CategoryRegistryUtil'))) {
            pn_exit (__f('Error! Unable to load class [%s]', array('s' => 'CategoryRegistryUtil'), $dom));
        }
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories($this->name, 'advanced_polls_desc');

        $this->view->assign('catregistry', $catregistry);
    }

    // assign the item to the template
    $this->view->assign($item);
    $this->view->assign($modvars);

    // Return the output that has been generated by this function
    return $this->view->fetch('advancedpolls_admin_modify.htm');
}

/**
 * Update a poll
 */
public function update()
{
    $dom = ZLanguage::getModuleDomain('advanced_polls');

    $poll                = FormUtil::getPassedValue('poll', isset($args['poll']) ? $args['poll'] : null, 'POST');
    $poll['startDay']    = FormUtil::getPassedValue('startDay', isset($args['startDay']) ? $args['startDay'] : null, 'POST');
    $poll['startMonth' ] = FormUtil::getPassedValue('startMonth', isset($args['startMonth']) ? $args['startMonth'] : null, 'POST');
    $poll['startYear']   = FormUtil::getPassedValue('startYear', isset($args['startYear']) ? $args['startYear'] : null, 'POST');
    $poll['startHour']   = FormUtil::getPassedValue('startHour', isset($args['startHour']) ? $args['startHour'] : null, 'POST');
    $poll['startMinute'] = FormUtil::getPassedValue('startMinute', isset($args['startMinute']) ? $args['startMinute'] : null, 'POST');
    $poll['closeDay']    = FormUtil::getPassedValue('closeDay', isset($args['closeDay']) ? $args['closeDay'] : null, 'POST');
    $poll['closeMonth']  = FormUtil::getPassedValue('closeMonth', isset($args['closeMonth']) ? $args['closeMonth'] : null, 'POST');
    $poll['closeYear']   = FormUtil::getPassedValue('closeYear', isset($args['closeYear']) ? $args['closeYear'] : null, 'POST');
    $poll['closeHour']   = FormUtil::getPassedValue('closeHour', isset($args['closeHour']) ? $args['closeHour'] : null, 'POST');
    $poll['closeMinute'] = FormUtil::getPassedValue('closeMinute', isset($args['closeMinute']) ? $args['closeMinute'] : null, 'POST');

    // Confirm authorisation code.
    if (!SecurityUtil::generateCsrfToken()) {
        return LogUtil::registerPermissionError (ModUtil::url($this->name, 'admin', 'view'));
    }

    // Notable by its absence there is no security check here

    // The API function is called.
    if (ModUtil::apiFunc($this->name, 'admin', 'update', $poll)) {
        LogUtil::registerStatus( __('Done! Poll updated.', $dom));
    }

    // redirect the user to an appropriate page
    return System::redirect(ModUtil::url($this->name, 'admin', 'view'));
}

/**
 * Delete a poll
 *
 * @param 'pollid' the id of the item to be deleted
 * @param 'confirmation' confirmation that this item can be deleted
 */
public function delete($args)
{
    $dom = ZLanguage::getModuleDomain('advanced_polls');

    $pollid       = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'REQUEST');
    $objectid     = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $pollid = $objectid;
    }

    // Get the poll
    $item = ModUtil::apiFunc($this->name, 'user', 'get', array('pollid' => $pollid));

    if ($item == false) {
        return LogUtil::registerError (__('Error! No such poll found.', $dom), 404);
    }

    // Security check.
    if (!SecurityUtil::checkPermission('advanced_polls::item', "$item[title]::$pollid", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet - display a suitable form to obtain confirmation
        // of this action from the user

        // Assign hidden form value for pollid
        $this->view->assign('pollid', $pollid);

        // Return the output that has been generated by this function
        return $this->view->fetch('advancedpolls_admin_delete.htm');
    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code.
    if (!SecurityUtil::generateCsrfToken()) {
        return LogUtil::registerPermissionError (ModUtil::url($this->name, 'admin', 'view'));
    }

    // The API function is called.
    if (ModUtil::apiFunc($this->name, 'admin', 'delete', array('pollid' => $pollid))) {
        LogUtil::registerStatus( __('Done! Poll deleted.', $dom));
    }

    return System::redirect(ModUtil::url($this->name, 'admin', 'view'));
}

/**
 * Main admin function to view a full list of polls
 */
public function view($args)
{
    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::item', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    $dom = ZLanguage::getModuleDomain('advanced_polls');

    // Get parameters from whatever input we need.
    $startnum = (int)FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
    $property = FormUtil::getPassedValue('advanced_polls_property', isset($args['advanced_polls_property']) ? $args['advanced_polls_property'] : null, 'GETPOST');
    $category = FormUtil::getPassedValue("advanced_polls_{$property}_category", isset($args["advanced_polls_{$property}_category"]) ? $args["advanced_polls_{$property}_category"] : null, 'GETPOST');
    $clear    = FormUtil::getPassedValue('clear', false, 'POST');
    if ($clear) {
        $property = null;
        $category = null;
    }

    // get module vars for later use
    $modvars = ModUtil::getVar('advanced_polls');

    if ($modvars['enablecategorization']) {
        // load the category registry util
        /*if (!($class = Loader::loadClass('CategoryRegistryUtil'))) {
            pn_exit (__f('Error! Unable to load class [%s]', array('s' => 'CategoryRegistryUtil'), $dom));
        } TODO */
        $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('advanced_polls', 'advanced_polls_desc');
        $properties = array_keys($catregistry);

        // Validate and build the category filter - mateo
        if (!empty($property) && in_array($property, $properties) && !empty($category)) {
            $catFilter = array($property => $category);
        }

        // Assign a default property - mateo
        if (empty($property) || !in_array($property, $properties)) {
            $property = $properties[0];
        }

        // plan ahead for ML features
        $propArray = array();
        foreach ($properties as $prop) {
            $propArray[$prop] = $prop;
        }
    }

    // get all matching polls
    $items = ModUtil::apiFunc($this->name, 'user', 'getall', array('checkml' => false,
                                                                    'startnum' => $startnum,
                                                                    'numitems' => ModUtil::getVar('advanced_polls', 'adminitemsperpage'),
                                                                    'category' => isset($catFilter) ? $catFilter : null,
                                                                    'catregistry'  => isset($catregistry) ? $catregistry : null));

    if (!$items)
    $items = array();

    foreach ($items as $key => $item) {
        // check if poll is open
        $items[$key]['isopen'] = ModUtil::apiFunc($this->name, 'user', 'isopen', array('pollid' => $item['pollid']));
        $options = array();
        if (SecurityUtil::checkPermission('advanced_polls::item', "$item[title]::$item[pollid]", ACCESS_EDIT)) {
            $options[] = array('url' => ModUtil::url($this->name, 'admin', 'modify', array('pollid' => $item['pollid'])),
                               'image' => 'xedit.png',
                               'title' => __('Edit', $dom));
            if (SecurityUtil::checkPermission('advanced_polls::item', "$item[title]::$item[pollid]", ACCESS_DELETE)) {
                $options[] = array('url' => ModUtil::url($this->name, 'admin', 'delete', array('pollid' => $item['pollid'])),
                               'image' => '14_layer_deletelayer.png',
                               'title' => __('Delete', $dom));
            }
            $options[] = array('url' => ModUtil::url($this->name, 'admin', 'resetvotes', array('pollid' => $item['pollid'])),
                               'image' => 'editclear.png',
                               'title' => __('Reset votes', $dom));
            $options[] = array('url' => ModUtil::url($this->name, 'admin', 'duplicate', array('pollid' => $item['pollid'])),
                               'image' => 'editcopy.png',
                               'title' => __('Duplicate poll', $dom));
            $options[] = array('url' => ModUtil::url($this->name, 'admin', 'adminstats', array('pollid' => $item['pollid'])),
                               'image' => 'vcalendar.png',
                               'title' => __('Voting statistics', $dom));
        }
        $items[$key]['options'] = $options;
    }


    // Assign the items to the template
    $this->view->assign('polls', $items);
    $this->view->assign($modvars);

    // Assign the default language
    $this->view->assign('lang', ZLanguage::getLanguageCode());

    // Assign the categories information if enabled
    if ($modvars['enablecategorization']) {
        $this->view->assign('catregistry', $catregistry);
        $this->view->assign('numproperties', count($propArray));
        $this->view->assign('properties', $propArray);
        $this->view->assign('property', $property);
        $this->view->assign('category', $category);
    }

    // Assign the values for the smarty plugin to produce a pager in case of there
    // being many items to display.
    $this->view->assign('pager', array('numitems'          => ModUtil::apiFunc('advanced_polls', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                                     'adminitemsperpage' => $modvars['adminitemsperpage']));


    // Return the output that has been generated by this function
    return $this->view->fetch('advancedpolls_admin_view.htm');
}

/**
 * Modify module configuration
 */
public function modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    $dom = ZLanguage::getModuleDomain('AdvancedPolls');

    $this->view->assign(ModUtil::getVar($this->name));

    // Return the output that has been generated by this function
    return $this->view->fetch('advancedpolls_admin_modifyconfig.htm');
}

/**
 * Update module configuration
 */
public function updateconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code.
    if (!SecurityUtil::generateCsrfToken()) {
        return LogUtil::registerPermissionError (ModUtil::url('advanced_polls', 'admin', 'view'));
    }

    $dom = ZLanguage::getModuleDomain('advanced_polls');

    $config = FormUtil::getPassedValue('config', isset($args['config']) ? $args['config'] : null, 'POST');

    // Update module variables.
    if (!isset($config['usereversedns'])) {
        $config['usereversedns'] = 0;
    }
    ModUtil::setVar($this->name, 'usereversedns', $config['usereversedns']);

    if (!isset($config['scalingfactor'])) {
        $config['scalingfactor'] = 4;
    }
    ModUtil::setVar($this->name, 'scalingfactor', $config['scalingfactor']);

    if (!isset($config['cssbars'])) {
        $config['cssbars'] = 0;
    }
    ModUtil::setVar($this->name, 'cssbars', $config['cssbars']);

    if (!isset($config['adminitemsperpage'])) {
        $config['adminitemsperpage'] = 25;
    }
    ModUtil::setVar($this->name, 'adminitemsperpage', $config['adminitemsperpage']);

    if (!isset($config['defaultcolour'])) {
        $config['defaultcolour'] = '#000000';
    }
    ModUtil::setVar($this->name, 'defaultcolour', $config['defaultcolour']);

    if (!isset($config['defaultoptioncount'])) {
        $config['defaultoptioncount'] = '12';
    }
    ModUtil::setVar($this->name, 'defaultoptioncount', $config['defaultoptioncount']);

    if (isset($config['enablecategorization'])) {
        $config['enablecategorization'] = true;
    } else {
        $config['enablecategorization'] = false;
    }
    ModUtil::setVar($this->name, 'enablecategorization', $config['enablecategorization']);

    // Let any other modules know that the modules configuration has been updated
    ModUtil::callHooks('module', 'updateconfig', 'advanced_polls', array('module' => 'advanced_polls'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus ($this->__('Done! Module configuration updated.'));

    // redirect the user to an appropriate page
    return System::redirect(ModUtil::url('AdvancedPolls', 'admin', 'view'));
}

/**
 * Reset the votes on a poll
 */
public function resetvotes()
{
    $dom = ZLanguage::getModuleDomain('advanced_polls');

    $pollid       = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'REQUEST');
    $objectid     = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $pollid = $objectid;
    }

    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::item', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation
    if (empty($confirmation)) {
        // No confirmation yet - get one

        $this->view->assign('pollid', $pollid);
        // Return the output that has been generated by this function
        return $this->view->fetch('advancedpolls_admin_resetvotes.htm');
    }

    // Confirm authorisation code
    if (!SecurityUtil::generateCsrfToken()) {
        return LogUtil::registerpermissionError (ModUtil::url($this->name, 'admin', 'view'));
    }

    // Pass to API
    if (ModUtil::apiFunc($this->name, 'admin', 'resetvotes', array('pollid' => $pollid))) {
        LogUtil::registerStatus (__('Done! Votes reset.', $dom));
    }

    return System::redirect(ModUtil::url($this->name, 'admin', 'view'));
}

/**
 * Display voting statistics to admin
 */
public function adminstats()
{
    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Get parameters
    $pollid    = FormUtil::getPassedValue('pollid');
    $sortorder = FormUtil::getPassedValue('sortorder');
    $sortby    = FormUtil::getPassedValue('sortby');
    $startnum  = FormUtil::getPassedValue('startnum');

    // set default sort order
    if (!isset($sortorder)) {
        $sortorder = 0;
    }
    // set default sort by
    if (!isset($sortby)) {
        $sortby = 1;
    }

    // get all votes for this poll from api
    $votes = ModUtil::apiFunc($this->name, 'admin', 'getvotes',
    array('pollid' => $pollid,
          'sortorder' => $sortorder,
          'sortby' => $sortby,
          'startnum' => $startnum,
          'numitems' => ModUtil::getVar($this->name, 'adminitemsperpage')));

    // get all votes for this poll from api
    $item = ModUtil::apiFunc($this->name, 'user', 'get', array('pollid' => $pollid));

    $this->view->assign('item', $item);
    $this->view->assign('pollid', $pollid);
    $votecountarray = ModUtil::apiFunc($this->name, 'user', 'pollvotecount', array('pollid'=>$pollid));
    $votecount = $votecountarray['totalvotecount'];
    $this->view->assign('votecount', $votecount);
    $this->view->assign('sortby', $sortby);
    $this->view->assign('sortorder', $sortorder);

    if ($votes == true ) {
        foreach ($votes as $key => $vote) {
            if (ModUtil::getVar($this->name, 'usereversedns')) {
                $host = gethostbyaddr($vote['ip']) . ' - ' . $vote['ip'];
            } else {
                $host = $vote['ip'];
            }
            $voteoffset = $vote['optionid']-1;
            $votes[$key]['user'] = UserUtil::getVar('uname',$vote['uid']);
            $votes[$key]['optiontext'] = $item['options'][$voteoffset]['optiontext'];
        }
    }
    $this->view->assign('votes', $votes);

    // Assign the values for the smarty plugin to produce a pager in case of there
    // being many items to display.
    $this->view->assign('pager', array('numitems'          => $votecount,
                                     'adminitemsperpage' => ModUtil::getVar('advanced_polls', 'adminitemsperpage')));

    return $this->view->fetch('advancedpolls_admin_adminstats.htm');
}

/**
 * Duplicate poll
 */
public function duplicate()
{
    $dom = ZLanguage::getModuleDomain('advanced_polls');

    $pollid       = FormUtil::getPassedValue('pollid', isset($args['pollid']) ? $args['pollid'] : null, 'REQUEST');
    $objectid     = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $pollid = $objectid;
    }

    // The user API function is called.
    $item = ModUtil::apiFunc($this->name, 'user', 'get', array('pollid' => $pollid));

    if ($item == false) {
        return LogUtil::registerError(__('Error! No such poll found.', $dom));
    }

    // Security check
    if (!SecurityUtil::checkPermission('advanced_polls::item', "$item[title]::$pollid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet - display a suitable form to obtain confirmation
        // of this action from the user

        // Assign a hidden form value for the poll id
        $this->view->assign('pollid', $pollid);

        // Return the output that has been generated by this function
        return $this->view->fetch('advancedpolls_admin_duplicate.htm');
    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code.
    if (!SecurityUtil::generateCsrfToken()) {
        return LogUtil::registerPermissionError (ModUtil::url($this->name, 'admin', 'view'));
    }

    // The API function is called
    if (ModUtil::apiFunc($this->name, 'admin', 'duplicate', array('pollid' => $pollid))) {
        LogUtil::registerStatus( __('Done! Poll duplicated.', $dom));
    }

    // redirect the user to an appropriate page
    return System::redirect(ModUtil::url($this->name, 'admin', 'view'));
}
}